/*
 * parser.cup -- SPL parser specification
 */


package parse;

import java_cup.runtime.*;
import sym.*;
import absyn.*;

/* Preliminaries to set up and use the scanner.  */
/*
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};
*/
parser code {:

  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }

:}

/* Terminals (tokens returned by the scanner). */
terminal			ARRAY, ELSE, IF, OF, PROC, REF, TYPE, VAR, WHILE, LPAREN, RPAREN, LBRACK,
					RBRACK, LCURL, RCURL, EQ, NE, LT, LE, GT, GE, ASGN, COLON, COMMA, SEMIC, PLUS,
					MINUS, STAR, SLASH;
terminal Integer	INTLIT;
terminal String		IDENT;


/* Non-terminals */

non terminal        DecList program;
non terminal        Dec decs;
non terminal        Dec dec;
non terminal	    TypeDec typedef;
non terminal		Ty type;
non terminal		ProcDec procedure;
non terminal		CallStm procedure_call;
non terminal		ParDec parameter;
non terminal		DecList parameterList;
non terminal		DecList paramListTail;
non terminal		Exp argument;
non terminal		ExpList argumentList;
non terminal		ExpList argumentListTail;
non terminal		VarDec vardec;
non terminal		VarDec vardecs;
non terminal		AssignStm varassign;
non terminal		WhileStm while_statement;
non terminal		IfStm if_statement;
non terminal		Stm statement;
non terminal		StmList statements;
non terminal		Exp refExpression;
non terminal		Exp expression;
non terminal		Exp simple_expression;
non terminal		Exp term;
non terminal		Exp unary;
non terminal		Exp factor;

start with program;
program                 ::= decs:d {:RESULT = new DecList(d, new DecList());:} | {:RESULT = new DecList();:}
    ;
decs                    ::= dec | dec decs
    ;
dec 			        ::= typedef |
                            procedure |
    ;
typedef                 ::= TYPE IDENT:ident EQ type:ty SEMIC
                            {:RESULT = new TypeDec(identleft, identright, newSym(ident), ty);:}
    ;
type                    ::= IDENT:ident 
                            {:RESULT = new VarExp(identleft, identright, new SimpleVar(identleft, identright, newSym(ident)));:} |
                            ARRAY LBRACK INTLIT RBRACK OF type
    ;
procedure               ::= PROC IDENT:ident {:RESULT = new ProcDec(identleft, identright, newSym(ident), params, decls, stmts);:}
                            LPAREN parameterList:params RPAREN LCURL vardecs:decls statements:stmts RCURL
    ;
procedure_call          ::= IDENT LPAREN argumentList:expList RPAREN SEMIC {:RESULT = new CallStm(identleft, identright, newSym(ident), expList);:}
    ;
parameterList 			::= {:RESULT = new DecList();:} | parameter:dec paramListTail:decList {:RESULT = new DecList(dec, decList);:}
	;
parameter 				::= IDENT:ident COLON type:typ {:RESULT = new ParDec(identleft, identright, newSym(ident), typ, false);:} |
                            REF IDENT:ident COLON type:typ {:RESULT = new ParDec(identleft, identright, newSym(ident), typ, true);:}
	;
paramListTail 			::= | COMMA parameter:dec paramListTail:decList
                            {:RESULT = new DecList(dec, decList);:}
	;
argumentList			::= | argument:head argumentListTail:tail
                            {:RESULT = new ExpList(head, tail);:}
	;
argumentListTail 		::= | COMMA argument argumentListTail
                            {:RESULT = new ExpList(head, tail);:}
	;
argument 				::= expression:expr
                            {:RESULT = expr;:}
	;

vardec                  ::= VAR IDENT:ident COLON type:ty SEMIC {:RESULT = new VarDec(identleft, identright, ident, ty);:}
    ;
vardecs					::= vardec:vard vardecs:vards {:RESULT = new DecList(vard, vards);:} |
	;
varassign               ::= refExpression:var ASGN expression:exp SEMIC {:RESULT = new AssignStm(varleft, varright, var, exp);:}
    ;
while_statement         ::= WHILE:whi LPAREN expression:exp RPAREN statement:stm {:RESULT = new WhileStm(whileft, whiright, exp, stm);:}
    ;   
if_statement            ::= IF:i LPAREN expression:exp RPAREN statement:stm
                            {:RESULT = new IfStm(ileft, iright, exp, stm, new EmptyStm());:} |
                            IF LPAREN expression:exp RPAREN statement:stm ELSE statement:stm2
                            {:RESULT = new IfStm(ileft, iright, exp, stm, stm2);:}
    ;
statement               ::= varassign | procedure_call | if_statement | while_statement | SEMIC {:RESULT = new EmptyStm();:} |
                            LCURL statements:stms RCURL {:RESULT = new CompStm(stmsleft, stmsright, stms);:}
    ;
statements				::= statement:head statements:tail {:RESULT = new StmList(head, tail);:} | 
	;

refExpression 			::= IDENT:ident {:RESULT = VarExp(identleft, identright, ident);:} |
                            refExpression:ref LBRACK expression:exp RBRACK {:RESULT = ArrayVar(refleft, refright, ref, exp);:}
	;
expression              ::= simple_expression:exp1 EQ simple_expression:exp2 
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.EQU, exp1, exp2);:} |
                            simple_expression:exp1 NE simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.NEQ, exp1, exp2);:} |
							simple_expression:exp1 LT simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.LST, exp1, exp2);:} |
							simple_expression:exp1 LE simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.LSE, exp1, exp2);:} |
							simple_expression:exp1 GT simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.GRT, exp1, exp2);:} |
							simple_expression:exp1 GE simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.GRE, exp1, exp2);:} |
							simple_expression
    ; 
simple_expression       ::= term |
                            term:exp1 PLUS simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.ADD, exp1, exp2);:} |
                            term:exp1 MINUS simple_expression:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.SUB, exp1, exp2);:}
    ;
term                    ::= unary |
                            unary:exp1 STAR term:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.MUL, exp1, exp2);:} |
                            unary:exp1 SLASH term:exp2
                            {:RESULT = new OpExp(exp1left, exp1right, OpExp.DIV, exp1, exp2);:}
    ;
unary 					::= factor |
                            MINUS factor:exp2
                            {:RESULT = new OpExp(exp2left, exp2right, OpExp.SUB, new IntExp(exp2left, exp2right, 0), exp2);:}
	;
factor                  ::= refExpression | INTLIT | LPAREN expression RPAREN
    ;