
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Aug 11 16:51:51 CEST 2018
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import sym.*;
import absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Aug 11 16:51:51 CEST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\004\002\000\002\004" +
    "\004\000\002\010\003\000\002\010\003\000\002\011\007" +
    "\000\002\002\003\000\002\002\010\000\002\013\013\000" +
    "\002\016\007\000\002\005\002\000\002\005\004\000\002" +
    "\014\005\000\002\014\006\000\002\006\002\000\002\006" +
    "\005\000\002\023\002\000\002\023\004\000\002\024\002" +
    "\000\002\024\005\000\002\025\003\000\002\012\007\000" +
    "\002\007\002\000\002\007\004\000\002\017\006\000\002" +
    "\020\007\000\002\021\007\000\002\021\011\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\015\004\000" +
    "\002\015\002\000\002\003\003\000\002\003\006\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\003\000\002\027\005\000\002\027\005\000" +
    "\002\030\003\000\002\030\005\000\002\030\005\000\002" +
    "\031\003\000\002\031\004\000\002\032\003\000\002\032" +
    "\003\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\000\010\007\012\011\001\002\000" +
    "\004\002\171\001\002\000\010\002\ufffe\010\ufffe\012\ufffe" +
    "\001\002\000\010\002\ufffd\010\ufffd\012\ufffd\001\002\000" +
    "\004\042\026\001\002\000\010\002\000\010\007\012\011" +
    "\001\002\000\004\042\012\001\002\000\004\023\013\001" +
    "\002\000\006\004\016\042\015\001\002\000\004\034\024" +
    "\001\002\000\010\016\ufffb\033\ufffb\034\ufffb\001\002\000" +
    "\004\017\017\001\002\000\004\041\020\001\002\000\004" +
    "\020\021\001\002\000\004\007\022\001\002\000\006\004" +
    "\016\042\015\001\002\000\010\016\ufffa\033\ufffa\034\ufffa" +
    "\001\002\000\010\002\ufffc\010\ufffc\012\ufffc\001\002\000" +
    "\004\002\uffff\001\002\000\004\015\027\001\002\000\010" +
    "\011\030\016\ufff7\042\032\001\002\000\004\042\166\001" +
    "\002\000\004\016\042\001\002\000\004\032\040\001\002" +
    "\000\006\016\ufff3\033\034\001\002\000\006\011\030\042" +
    "\032\001\002\000\004\016\ufff6\001\002\000\006\016\ufff3" +
    "\033\034\001\002\000\004\016\ufff2\001\002\000\006\004" +
    "\016\042\015\001\002\000\006\016\ufff5\033\ufff5\001\002" +
    "\000\004\021\043\001\002\000\020\006\uffeb\013\044\014" +
    "\uffeb\021\uffeb\022\uffeb\034\uffeb\042\uffeb\001\002\000\004" +
    "\042\162\001\002\000\020\006\uffeb\013\044\014\uffeb\021" +
    "\uffeb\022\uffeb\034\uffeb\042\uffeb\001\002\000\016\006\054" +
    "\014\047\021\055\022\uffde\034\051\042\050\001\002\000" +
    "\004\015\155\001\002\000\010\015\143\017\uffdd\031\uffdd" +
    "\001\002\000\020\005\uffe1\006\uffe1\014\uffe1\021\uffe1\022" +
    "\uffe1\034\uffe1\042\uffe1\001\002\000\020\005\uffe5\006\uffe5" +
    "\014\uffe5\021\uffe5\022\uffe5\034\uffe5\042\uffe5\001\002\000" +
    "\004\022\142\001\002\000\004\015\134\001\002\000\016" +
    "\006\054\014\047\021\055\022\uffde\034\051\042\050\001" +
    "\002\000\006\017\064\031\065\001\002\000\016\006\054" +
    "\014\047\021\055\022\uffde\034\051\042\050\001\002\000" +
    "\020\005\uffe4\006\uffe4\014\uffe4\021\uffe4\022\uffe4\034\uffe4" +
    "\042\uffe4\001\002\000\020\005\uffe2\006\uffe2\014\uffe2\021" +
    "\uffe2\022\uffe2\034\uffe2\042\uffe2\001\002\000\020\005\uffe3" +
    "\006\uffe3\014\uffe3\021\uffe3\022\uffe3\034\uffe3\042\uffe3\001" +
    "\002\000\004\022\uffdf\001\002\000\012\015\077\036\066" +
    "\041\070\042\067\001\002\000\012\015\077\036\066\041" +
    "\070\042\067\001\002\000\010\015\077\041\070\042\067" +
    "\001\002\000\040\016\uffdd\017\uffdd\020\uffdd\023\uffdd\024" +
    "\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\033\uffdd\034\uffdd" +
    "\035\uffdd\036\uffdd\037\uffdd\040\uffdd\001\002\000\036\016" +
    "\uffcb\020\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\001\002\000\032\016\uffd4\020\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\026\uffd4\027\uffd4\030\uffd4\033\uffd4\034\uffd4\035" +
    "\123\036\124\001\002\000\036\016\uffd1\020\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\uffd1\037\117\040\120\001\002\000\004" +
    "\034\116\001\002\000\040\016\uffcc\017\064\020\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\033\uffcc" +
    "\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\001\002\000" +
    "\026\016\uffd5\020\uffd5\023\103\024\107\025\102\026\105" +
    "\027\104\030\106\033\uffd5\034\uffd5\001\002\000\036\016" +
    "\uffce\020\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\040" +
    "\uffce\001\002\000\012\015\077\036\066\041\070\042\067" +
    "\001\002\000\004\016\101\001\002\000\036\016\uffca\020" +
    "\uffca\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\001" +
    "\002\000\012\015\077\036\066\041\070\042\067\001\002" +
    "\000\012\015\077\036\066\041\070\042\067\001\002\000" +
    "\012\015\077\036\066\041\070\042\067\001\002\000\012" +
    "\015\077\036\066\041\070\042\067\001\002\000\012\015" +
    "\077\036\066\041\070\042\067\001\002\000\012\015\077" +
    "\036\066\041\070\042\067\001\002\000\012\016\uffda\020" +
    "\uffda\033\uffda\034\uffda\001\002\000\012\016\uffd6\020\uffd6" +
    "\033\uffd6\034\uffd6\001\002\000\012\016\uffd8\020\uffd8\033" +
    "\uffd8\034\uffd8\001\002\000\012\016\uffd7\020\uffd7\033\uffd7" +
    "\034\uffd7\001\002\000\012\016\uffdb\020\uffdb\033\uffdb\034" +
    "\uffdb\001\002\000\012\016\uffd9\020\uffd9\033\uffd9\034\uffd9" +
    "\001\002\000\020\005\uffe9\006\uffe9\014\uffe9\021\uffe9\022" +
    "\uffe9\034\uffe9\042\uffe9\001\002\000\012\015\077\036\066" +
    "\041\070\042\067\001\002\000\012\015\077\036\066\041" +
    "\070\042\067\001\002\000\032\016\uffcf\020\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\036\uffcf\001\002\000\032\016\uffd0\020\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\001\002\000\012\015\077" +
    "\036\066\041\070\042\067\001\002\000\012\015\077\036" +
    "\066\041\070\042\067\001\002\000\026\016\uffd2\020\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2\033" +
    "\uffd2\034\uffd2\001\002\000\026\016\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\033\uffd3\034" +
    "\uffd3\001\002\000\036\016\uffcd\020\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\030\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\001\002\000\004\020\131" +
    "\001\002\000\042\016\uffdc\017\uffdc\020\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\004\022\133\001\002\000\020\005\uffe0\006\uffe0\014\uffe0" +
    "\021\uffe0\022\uffe0\034\uffe0\042\uffe0\001\002\000\012\015" +
    "\077\036\066\041\070\042\067\001\002\000\004\016\136" +
    "\001\002\000\014\006\054\014\047\021\055\034\051\042" +
    "\050\001\002\000\020\005\140\006\uffe7\014\uffe7\021\uffe7" +
    "\022\uffe7\034\uffe7\042\uffe7\001\002\000\014\006\054\014" +
    "\047\021\055\034\051\042\050\001\002\000\020\005\uffe6" +
    "\006\uffe6\014\uffe6\021\uffe6\022\uffe6\034\uffe6\042\uffe6\001" +
    "\002\000\010\002\ufff9\010\ufff9\012\ufff9\001\002\000\014" +
    "\015\077\016\ufff1\036\066\041\070\042\067\001\002\000" +
    "\006\016\uffef\033\151\001\002\000\006\016\uffed\033\uffed" +
    "\001\002\000\004\016\147\001\002\000\004\034\150\001" +
    "\002\000\020\005\ufff8\006\ufff8\014\ufff8\021\ufff8\022\ufff8" +
    "\034\ufff8\042\ufff8\001\002\000\012\015\077\036\066\041" +
    "\070\042\067\001\002\000\004\016\ufff0\001\002\000\006" +
    "\016\uffef\033\151\001\002\000\004\016\uffee\001\002\000" +
    "\012\015\077\036\066\041\070\042\067\001\002\000\004" +
    "\016\157\001\002\000\014\006\054\014\047\021\055\034" +
    "\051\042\050\001\002\000\020\005\uffe8\006\uffe8\014\uffe8" +
    "\021\uffe8\022\uffe8\034\uffe8\042\uffe8\001\002\000\016\006" +
    "\uffea\014\uffea\021\uffea\022\uffea\034\uffea\042\uffea\001\002" +
    "\000\004\032\163\001\002\000\006\004\016\042\015\001" +
    "\002\000\004\034\165\001\002\000\020\006\uffec\013\uffec" +
    "\014\uffec\021\uffec\022\uffec\034\uffec\042\uffec\001\002\000" +
    "\004\032\167\001\002\000\006\004\016\042\015\001\002" +
    "\000\006\016\ufff4\033\ufff4\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\012\004\003\010\007\011\004\013\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\024\010\007\011\004\013" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\030\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\034\001\001\000\004" +
    "\014\035\001\001\000\002\001\001\000\004\006\036\001" +
    "\001\000\002\001\001\000\004\002\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\045\012\044\001" +
    "\001\000\002\001\001\000\006\007\160\012\044\001\001" +
    "\000\020\003\055\015\052\016\057\017\051\020\060\021" +
    "\061\022\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\055\015\131\016\057\017\051" +
    "\020\060\021\061\022\056\001\001\000\002\001\001\000" +
    "\020\003\055\015\062\016\057\017\051\020\060\021\061" +
    "\022\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\073\026\127" +
    "\027\074\030\070\031\071\032\075\001\001\000\016\003" +
    "\073\026\072\027\074\030\070\031\071\032\075\001\001" +
    "\000\006\003\073\032\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\073\026\077\027\074\030\070\031\071" +
    "\032\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\073\027\114\030\070\031\071\032\075\001\001" +
    "\000\014\003\073\027\113\030\070\031\071\032\075\001" +
    "\001\000\014\003\073\027\112\030\070\031\071\032\075" +
    "\001\001\000\014\003\073\027\111\030\070\031\071\032" +
    "\075\001\001\000\014\003\073\027\110\030\070\031\071" +
    "\032\075\001\001\000\014\003\073\027\107\030\070\031" +
    "\071\032\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\073\030\121" +
    "\031\071\032\075\001\001\000\012\003\073\030\120\031" +
    "\071\032\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\003\073\027\125\030\070\031\071\032\075\001" +
    "\001\000\014\003\073\027\124\030\070\031\071\032\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\073\026\134\027\074\030" +
    "\070\031\071\032\075\001\001\000\002\001\001\000\016" +
    "\003\055\016\057\017\051\020\060\021\061\022\136\001" +
    "\001\000\002\001\001\000\016\003\055\016\057\017\051" +
    "\020\060\021\061\022\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\073\023\145\025\143\026\144" +
    "\027\074\030\070\031\071\032\075\001\001\000\004\024" +
    "\151\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\003\073\025\152\026" +
    "\144\027\074\030\070\031\071\032\075\001\001\000\002" +
    "\001\001\000\004\024\153\001\001\000\002\001\001\000" +
    "\016\003\073\026\155\027\074\030\070\031\071\032\075" +
    "\001\001\000\002\001\001\000\016\003\055\016\057\017" +
    "\051\020\060\021\061\022\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\002\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\167\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= INTLIT 
            {
              Exp RESULT =null;
		int intlitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int intlitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer intlit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExp(intlitleft, intlitright, intlit );
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= refExpression 
            {
              Exp RESULT =null;
		int refExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int refExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Var refExp = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= new VarExp(refExpleft, refExpright, refExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unary ::= MINUS factor 
            {
              Exp RESULT =null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp2left, exp2right, OpExp.SUB, new IntExp(exp2left, exp2right, 0), exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unary ::= factor 
            {
              Exp RESULT =null;
		int fexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp fexp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = fexp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= unary SLASH term 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.DIV, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= unary STAR term 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.MUL, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= unary 
            {
              Exp RESULT =null;
		int uexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int uexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp uexp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT=uexp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_expression ::= term MINUS simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.SUB, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_expression ::= term PLUS simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.ADD, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_expression ::= term 
            {
              Exp RESULT =null;
		int texpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int texpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp texp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= texp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= simple_expression 
            {
              Exp RESULT =null;
		int simExpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int simExpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp simExp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= simExp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= simple_expression GE simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.GRE, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= simple_expression GT simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.GRT, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= simple_expression LE simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.LSE, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= simple_expression LT simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.LST, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= simple_expression NE simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.NEQ, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression EQ simple_expression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OpExp(exp1left, exp1right, OpExp.EQU, exp1, exp2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // refExpression ::= refExpression LBRACK expression RBRACK 
            {
              Var RESULT =null;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var ref = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ArrayVar(refleft, refright, ref, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refExpression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // refExpression ::= IDENT 
            {
              Var RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SimpleVar(identleft, identright, Sym.newSym(ident.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refExpression",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statements ::= 
            {
              StmList RESULT =null;
		 RESULT = new StmList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= statement statements 
            {
              StmList RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Stm head = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		StmList tail = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StmList(head, tail);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= LCURL statements RCURL 
            {
              Stm RESULT =null;
		int stmsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList stms = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new CompStm(stmsleft, stmsright, stms);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= SEMIC 
            {
              Stm RESULT =null;
		int semleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int semright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sem = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new EmptyStm(semleft, semright);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= while_statement 
            {
              Stm RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= if_statement 
            {
              Stm RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= procedure_call 
            {
              Stm RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= varassign 
            {
              Stm RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = stm;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stm2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stm2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm2 = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IfStm(ileft, iright, exp, stm, stm2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_statement ::= IF LPAREN expression RPAREN statement 
            {
              Stm RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IfStm(ileft, iright, exp, stm, new EmptyStm(ileft, iright));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Stm RESULT =null;
		int whileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int whiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object whi = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stm stm = (Stm)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new WhileStm(whileft, whiright, exp, stm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // varassign ::= refExpression ASGN expression SEMIC 
            {
              Stm RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignStm(varleft, varright, var, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varassign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vardecs ::= vardec vardecs 
            {
              DecList RESULT =null;
		int vardleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vardright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec vard = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vardsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vardsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList vards = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DecList(vard, vards);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardecs ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vardec ::= VAR IDENT COLON type SEMIC 
            {
              Dec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new VarDec(identleft, identright, Sym.newSym(ident.toString()), ty);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argument ::= expression 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentListTail ::= COMMA argument argumentListTail 
            {
              ExpList RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpList(head, tail);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentListTail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentListTail ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentListTail",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argumentList ::= argument argumentListTail 
            {
              ExpList RESULT =null;
		int headleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int headright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Exp head = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tailleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tailright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ExpList tail = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ExpList(head, tail);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argumentList ::= 
            {
              ExpList RESULT =null;
		RESULT = new ExpList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramListTail ::= COMMA parameter paramListTail 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList decList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DecList(dec, decList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramListTail",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramListTail ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramListTail",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter ::= REF IDENT COLON type 
            {
              Dec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty typ = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDec(identleft, identright, Sym.newSym(ident.toString()), typ, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameter ::= IDENT COLON type 
            {
              Dec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty typ = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDec(identleft, identright, Sym.newSym(ident.toString()), typ, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameterList ::= parameter paramListTail 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList decList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DecList(dec, decList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameterList ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure_call ::= IDENT LPAREN argumentList RPAREN SEMIC 
            {
              Stm RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList expList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallStm(identleft, identright, Sym.newSym(ident.toString()), expList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure ::= PROC IDENT LPAREN parameterList RPAREN LCURL vardecs statements RCURL 
            {
              Dec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DecList params = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		DecList decls = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList stmts = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProcDec(identleft, identright, Sym.newSym(ident.toString()), params, decls, stmts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= ARRAY LBRACK INTLIT RBRACK OF type 
            {
              Ty RESULT =null;
		int intlitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int intlitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer intlit = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayTy(intlitleft, intlitright, intlit, ty);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= IDENT 
            {
              Ty RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NameTy(identleft, identright, Sym.newSym(ident.toString()));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // typedef ::= TYPE IDENT EQ type SEMIC 
            {
              Dec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Ty ty = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new TypeDec(identleft, identright, Sym.newSym(ident.toString()), ty);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= procedure 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= typedef 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = dec;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= dec program 
            {
              DecList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Dec d = (Dec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList decs = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DecList(d, decs);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

