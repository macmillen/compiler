
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 19 12:26:42 CEST 2018
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import sym.*;
import absyn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 19 12:26:42 CEST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\072\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\007\000\002\004\003" +
    "\000\002\033\002\000\002\004\011\000\002\034\002\000" +
    "\002\005\014\000\002\006\007\000\002\010\002\000\002" +
    "\010\004\000\002\007\005\000\002\007\006\000\002\011" +
    "\002\000\002\011\005\000\002\012\003\000\002\013\002" +
    "\000\002\013\003\000\002\014\003\000\002\014\005\000" +
    "\002\015\007\000\002\016\004\000\002\016\002\000\002" +
    "\017\006\000\002\020\007\000\002\021\007\000\002\021" +
    "\011\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\005\000" +
    "\002\023\004\000\002\023\002\000\002\024\003\000\002" +
    "\024\006\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\003\000\002\026\003\000\002\026\005\000" +
    "\002\026\005\000\002\027\003\000\002\027\005\000\002" +
    "\027\005\000\002\030\003\000\002\030\004\000\002\031" +
    "\003\000\002\031\003\000\002\031\005\000\002\032\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\ufffe\010\006\012\010\001\002\000" +
    "\004\002\173\001\002\000\010\002\ufffe\010\006\012\010" +
    "\001\002\000\004\042\026\001\002\000\010\002\ufffe\010" +
    "\006\012\010\001\002\000\004\042\011\001\002\000\004" +
    "\023\012\001\002\000\006\004\ufffb\042\015\001\002\000" +
    "\004\004\017\001\002\000\004\034\016\001\002\000\010" +
    "\016\ufffc\033\ufffc\034\ufffc\001\002\000\010\002\ufffd\010" +
    "\ufffd\012\ufffd\001\002\000\004\017\020\001\002\000\004" +
    "\041\021\001\002\000\004\020\022\001\002\000\004\007" +
    "\023\001\002\000\006\004\ufffb\042\015\001\002\000\010" +
    "\016\ufffa\033\ufffa\034\ufffa\001\002\000\004\002\uffff\001" +
    "\002\000\004\015\ufff9\001\002\000\004\015\030\001\002" +
    "\000\010\011\031\016\ufff6\042\033\001\002\000\004\042" +
    "\167\001\002\000\004\016\043\001\002\000\004\032\041" +
    "\001\002\000\006\016\ufff2\033\035\001\002\000\006\011" +
    "\031\042\033\001\002\000\004\016\ufff5\001\002\000\006" +
    "\016\ufff2\033\035\001\002\000\004\016\ufff1\001\002\000" +
    "\006\004\ufffb\042\015\001\002\000\006\016\ufff4\033\ufff4" +
    "\001\002\000\004\021\044\001\002\000\020\006\uffe9\013" +
    "\045\014\uffe9\021\uffe9\022\uffe9\034\uffe9\042\uffe9\001\002" +
    "\000\004\042\163\001\002\000\020\006\uffe9\013\045\014" +
    "\uffe9\021\uffe9\022\uffe9\034\uffe9\042\uffe9\001\002\000\016" +
    "\006\054\014\050\021\055\022\uffdd\034\052\042\051\001" +
    "\002\000\004\015\156\001\002\000\010\015\145\017\uffdc" +
    "\031\uffdc\001\002\000\020\005\uffe0\006\uffe0\014\uffe0\021" +
    "\uffe0\022\uffe0\034\uffe0\042\uffe0\001\002\000\020\005\uffe4" +
    "\006\uffe4\014\uffe4\021\uffe4\022\uffe4\034\uffe4\042\uffe4\001" +
    "\002\000\004\015\137\001\002\000\016\006\054\014\050" +
    "\021\055\022\uffdd\034\052\042\051\001\002\000\004\022" +
    "\134\001\002\000\006\017\065\031\066\001\002\000\016" +
    "\006\054\014\050\021\055\022\uffdd\034\052\042\051\001" +
    "\002\000\020\005\uffe3\006\uffe3\014\uffe3\021\uffe3\022\uffe3" +
    "\034\uffe3\042\uffe3\001\002\000\020\005\uffe1\006\uffe1\014" +
    "\uffe1\021\uffe1\022\uffe1\034\uffe1\042\uffe1\001\002\000\020" +
    "\005\uffe2\006\uffe2\014\uffe2\021\uffe2\022\uffe2\034\uffe2\042" +
    "\uffe2\001\002\000\004\022\uffde\001\002\000\012\015\101" +
    "\036\067\041\071\042\070\001\002\000\012\015\101\036" +
    "\067\041\071\042\070\001\002\000\010\015\101\041\071" +
    "\042\070\001\002\000\040\016\uffdc\017\uffdc\020\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\033\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\001\002\000" +
    "\036\016\uffc8\020\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\030\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037" +
    "\uffc8\040\uffc8\001\002\000\032\016\uffd3\020\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\033\uffd3\034" +
    "\uffd3\035\125\036\126\001\002\000\036\016\uffd0\020\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\121\040\122\001\002" +
    "\000\036\016\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\001\002\000\004\034\120\001\002\000" +
    "\040\016\uffcb\017\065\020\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\uffcb\027\uffcb\030\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\037\uffcb\040\uffcb\001\002\000\026\016\uffd4\020\uffd4" +
    "\023\105\024\111\025\104\026\107\027\106\030\110\033" +
    "\uffd4\034\uffd4\001\002\000\036\016\uffcd\020\uffcd\023\uffcd" +
    "\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\033\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\001\002\000\012" +
    "\015\101\036\067\041\071\042\070\001\002\000\004\016" +
    "\103\001\002\000\036\016\uffc9\020\uffc9\023\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\037\uffc9\040\uffc9\001\002\000\012\015\101" +
    "\036\067\041\071\042\070\001\002\000\012\015\101\036" +
    "\067\041\071\042\070\001\002\000\012\015\101\036\067" +
    "\041\071\042\070\001\002\000\012\015\101\036\067\041" +
    "\071\042\070\001\002\000\012\015\101\036\067\041\071" +
    "\042\070\001\002\000\012\015\101\036\067\041\071\042" +
    "\070\001\002\000\012\016\uffd9\020\uffd9\033\uffd9\034\uffd9" +
    "\001\002\000\012\016\uffd5\020\uffd5\033\uffd5\034\uffd5\001" +
    "\002\000\012\016\uffd7\020\uffd7\033\uffd7\034\uffd7\001\002" +
    "\000\012\016\uffd6\020\uffd6\033\uffd6\034\uffd6\001\002\000" +
    "\012\016\uffda\020\uffda\033\uffda\034\uffda\001\002\000\012" +
    "\016\uffd8\020\uffd8\033\uffd8\034\uffd8\001\002\000\020\005" +
    "\uffe8\006\uffe8\014\uffe8\021\uffe8\022\uffe8\034\uffe8\042\uffe8" +
    "\001\002\000\012\015\101\036\067\041\071\042\070\001" +
    "\002\000\012\015\101\036\067\041\071\042\070\001\002" +
    "\000\032\016\uffce\020\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\033\uffce\034\uffce\035\uffce\036\uffce" +
    "\001\002\000\032\016\uffcf\020\uffcf\023\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\001\002\000\012\015\101\036\067\041\071\042" +
    "\070\001\002\000\012\015\101\036\067\041\071\042\070" +
    "\001\002\000\026\016\uffd1\020\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\034\uffd1\001\002" +
    "\000\026\016\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\033\uffd2\034\uffd2\001\002\000\036" +
    "\016\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\030\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc" +
    "\040\uffcc\001\002\000\004\020\133\001\002\000\042\016" +
    "\uffdb\017\uffdb\020\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\033\uffdb\034\uffdb\035\uffdb\036" +
    "\uffdb\037\uffdb\040\uffdb\001\002\000\010\002\ufff8\010\ufff8" +
    "\012\ufff8\001\002\000\004\022\136\001\002\000\020\005" +
    "\uffdf\006\uffdf\014\uffdf\021\uffdf\022\uffdf\034\uffdf\042\uffdf" +
    "\001\002\000\012\015\101\036\067\041\071\042\070\001" +
    "\002\000\004\016\141\001\002\000\014\006\054\014\050" +
    "\021\055\034\052\042\051\001\002\000\020\005\143\006" +
    "\uffe6\014\uffe6\021\uffe6\022\uffe6\034\uffe6\042\uffe6\001\002" +
    "\000\014\006\054\014\050\021\055\034\052\042\051\001" +
    "\002\000\020\005\uffe5\006\uffe5\014\uffe5\021\uffe5\022\uffe5" +
    "\034\uffe5\042\uffe5\001\002\000\014\015\101\016\uffef\036" +
    "\067\041\071\042\070\001\002\000\006\016\uffed\033\154" +
    "\001\002\000\004\016\uffee\001\002\000\006\016\ufff0\033" +
    "\ufff0\001\002\000\004\016\152\001\002\000\004\034\153" +
    "\001\002\000\020\005\ufff7\006\ufff7\014\ufff7\021\ufff7\022" +
    "\ufff7\034\ufff7\042\ufff7\001\002\000\012\015\101\036\067" +
    "\041\071\042\070\001\002\000\004\016\uffec\001\002\000" +
    "\012\015\101\036\067\041\071\042\070\001\002\000\004" +
    "\016\160\001\002\000\014\006\054\014\050\021\055\034" +
    "\052\042\051\001\002\000\020\005\uffe7\006\uffe7\014\uffe7" +
    "\021\uffe7\022\uffe7\034\uffe7\042\uffe7\001\002\000\016\006" +
    "\uffea\014\uffea\021\uffea\022\uffea\034\uffea\042\uffea\001\002" +
    "\000\004\032\164\001\002\000\006\004\ufffb\042\015\001" +
    "\002\000\004\034\166\001\002\000\020\006\uffeb\013\uffeb" +
    "\014\uffeb\021\uffeb\022\uffeb\034\uffeb\042\uffeb\001\002\000" +
    "\004\032\170\001\002\000\006\004\ufffb\042\015\001\002" +
    "\000\006\016\ufff3\033\ufff3\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\010\002\003\003\004\005\006\001\001\000" +
    "\002\001\001\000\010\002\171\003\004\005\006\001\001" +
    "\000\002\001\001\000\010\002\024\003\004\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\013" +
    "\033\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\023\033\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\034\026\001\001\000\002\001\001\000\006\007" +
    "\033\010\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\035\001\001\000\004\007" +
    "\036\001\001\000\002\001\001\000\004\011\037\001\001" +
    "\000\002\001\001\000\006\004\041\033\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\045\016\046" +
    "\001\001\000\002\001\001\000\006\015\045\016\161\001" +
    "\001\000\020\006\060\017\052\020\061\021\062\022\057" +
    "\023\055\024\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\060\017\052\020\061\021\062\022\057\023" +
    "\134\024\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\060\017\052\020\061\021\062\022\057\023" +
    "\063\024\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\024\075\025" +
    "\131\026\076\027\071\030\072\031\077\032\073\001\001" +
    "\000\020\024\075\025\074\026\076\027\071\030\072\031" +
    "\077\032\073\001\001\000\010\024\075\031\130\032\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\024\075\025\101\026\076\027\071\030\072\031\077" +
    "\032\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\024\075\026\116\027\071\030\072\031\077\032\073" +
    "\001\001\000\016\024\075\026\115\027\071\030\072\031" +
    "\077\032\073\001\001\000\016\024\075\026\114\027\071" +
    "\030\072\031\077\032\073\001\001\000\016\024\075\026" +
    "\113\027\071\030\072\031\077\032\073\001\001\000\016" +
    "\024\075\026\112\027\071\030\072\031\077\032\073\001" +
    "\001\000\016\024\075\026\111\027\071\030\072\031\077" +
    "\032\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\024\075\027\123\030" +
    "\072\031\077\032\073\001\001\000\014\024\075\027\122" +
    "\030\072\031\077\032\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\024\075\026\127\027\071\030\072" +
    "\031\077\032\073\001\001\000\016\024\075\026\126\027" +
    "\071\030\072\031\077\032\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\024\075\025\137\026\076\027\071\030" +
    "\072\031\077\032\073\001\001\000\002\001\001\000\016" +
    "\006\060\017\052\020\061\021\062\022\141\024\056\001" +
    "\001\000\002\001\001\000\016\006\060\017\052\020\061" +
    "\021\062\022\143\024\056\001\001\000\002\001\001\000" +
    "\026\012\145\013\150\014\146\024\075\025\147\026\076" +
    "\027\071\030\072\031\077\032\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\012\145\014" +
    "\154\024\075\025\147\026\076\027\071\030\072\031\077" +
    "\032\073\001\001\000\002\001\001\000\020\024\075\025" +
    "\156\026\076\027\071\030\072\031\077\032\073\001\001" +
    "\000\002\001\001\000\016\006\060\017\052\020\061\021" +
    "\062\022\160\024\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\164\033\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\170\033\012\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // number ::= INTLIT 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // factor ::= number 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= refExpression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // unary ::= MINUS factor 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // unary ::= factor 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= unary SLASH term 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= unary STAR term 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= unary 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // simple_expression ::= term MINUS simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // simple_expression ::= term PLUS simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_expression ::= term 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= simple_expression GE simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= simple_expression GT simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= simple_expression LE simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= simple_expression LT simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= simple_expression NE simple_expression 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= simple_expression EQ simple_expression 
            {
              Exp RESULT =null;
		RESULT = new OpExp(pos1, pos2, operator, op1, op2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // refExpression ::= refExpression LBRACK expression RBRACK 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // refExpression ::= IDENT 
            {
              Exp RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // statements ::= 
            {
              StmList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statements ::= statement statements 
            {
              StmList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= LCURL statements RCURL 
            {
              Stm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= SEMIC 
            {
              Stm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= while_statement 
            {
              Stm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= if_statement 
            {
              Stm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= procedure_call 
            {
              Stm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= varassign 
            {
              Stm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // if_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              IfStm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_statement ::= IF LPAREN expression RPAREN statement 
            {
              IfStm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              WhileStm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // varassign ::= refExpression ASGN expression SEMIC 
            {
              AssignStm RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varassign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vardecs ::= 
            {
              VarDec RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vardecs ::= vardec vardecs 
            {
              VarDec RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardec ::= VAR IDENT COLON type SEMIC 
            {
              VarDec RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argumentListTail ::= argument COMMA argumentListTail 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentListTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // argumentListTail ::= argument 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentListTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentList ::= argumentListTail 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentList ::= 
            {
              ExpList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argument ::= expression 
            {
              Exp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Exp expr = (Exp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = expr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramListTail ::= COMMA parameter paramListTail 
            {
              DecList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramListTail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramListTail ::= 
            {
              DecList RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramListTail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parameter ::= REF IDENT COLON type 
            {
              ParDec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty typ = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDec(identleft, identright, newSym(ident), typ, true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // parameter ::= IDENT COLON type 
            {
              ParDec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Ty typ = (Ty)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ParDec(identleft, identright, newSym(ident), typ, false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameterList ::= parameter paramListTail 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ParDec dec = (ParDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList decList = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DecList(dec, decList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameterList ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // procedure_call ::= IDENT LPAREN argumentList RPAREN SEMIC 
            {
              CallStm RESULT =null;
		int expListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ExpList expList = (ExpList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new CallStm(identleft, identright, newSym(ident), expList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // procedure ::= PROC IDENT NT$1 LPAREN parameterList RPAREN LCURL vardecs statements RCURL 
            {
              ProcDec RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ProcDec) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		DecList params = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int declsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		VarDec decls = (VarDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		StmList stmts = (StmList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              ProcDec RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
RESULT = new ProcDec(identleft, identright, newSym(ident), params, decls, stmts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= NT$0 ARRAY LBRACK INTLIT RBRACK OF type 
            {
              Ty RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Ty) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Ty RESULT =null;
RESULT = ...;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= IDENT 
            {
              Ty RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new VarExp(identleft, identright, new SimpleVar(identleft, identright, newSym(ident)));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // typedef ::= TYPE IDENT EQ type SEMIC 
            {
              TypeDec RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              DecList RESULT =null;
		RESULT = new DecList();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= procedure program 
            {
              DecList RESULT =null;
		RESULT = ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= typedef program 
            {
              DecList RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		TypeDec type = (TypeDec)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DecList prog = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DecList(type, prog);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

