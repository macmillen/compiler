acker.spl
---------
compile: compile acker
run:     run acker
input:   -none-
output:
0 0 1
0 1 2
0 2 3
0 3 4
0 4 5
0 5 6
0 6 7
1 0 2
1 1 3
1 2 4
1 3 5
1 4 6
1 5 7
1 6 8
2 0 3
2 1 5
2 2 7
2 3 9
2 4 11
2 5 13
2 6 15
3 0 5
3 1 13
3 2 29
3 3 61
3 4 125
3 5 253
3 6 509


arrayasgn.spl
-------------
compile: compile arrayasgn
output:
Error: assignment requires integer variable in line 11


arrayparm.spl
-------------
compile: compile arrayparm
output:
Error: parameter 'x' must be a reference parameter in line 7


bits.spl
--------
compile: compile bits
run:     run bits
input:   -none-
output:
0000 0111 0101 1011 1100 1101 0001 0101


drawTest.spl
------------
compile: compile drawTest
run:     rungraph drawTest
input:   -none-
output:
Kreuz und 5 bunte Kreise


gcd.spl
-------
compile: compile gcd
run:     run gcd
input:   -none-
output:
10164 2646 42


multiply.spl
------------
compile: compile multiply
run:     run multiply
input:   -none-
output:
 0   0   0   0   0   0   0   0   0   0   0  
 0   1   2   3   4   5   6   7   8   9  10  
 0   2   4   6   8  10  12  14  16  18  20  
 0   3   6   9  12  15  18  21  24  27  30  
 0   4   8  12  16  20  24  28  32  36  40  
 0   5  10  15  20  25  30  35  40  45  50  
 0   6  12  18  24  30  36  42  48  54  60  
 0   7  14  21  28  35  42  49  56  63  70  
 0   8  16  24  32  40  48  56  64  72  80  
 0   9  18  27  36  45  54  63  72  81  90  
 0  10  20  30  40  50  60  70  80  90  100


partind1.spl
------------
compile: compile partind1
run:     run partind1
input:   -none-
output:
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 1 2 3 4 5 6 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0


partind2.spl
------------
compile: compile partind2
run:     run partind2
input:   -none-
output:
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 

0 0 0 0 0 0 0 
0 2 0 0 0 0 0 
0 0 4 0 0 0 0 
0 0 0 6 0 0 0 
0 0 0 0 8 0 0 

0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 
0 0 0 0 0 0 0 


queens.spl
----------
compile: compile queens
run:     run queens
input:   -none-
output:
 0 . . . . . . .
 . . . . 0 . . .
 . . . . . . . 0
 . . . . . 0 . .
 . . 0 . . . . .
 . . . . . . 0 .
 . 0 . . . . . .
 . . . 0 . . . .

 0 . . . . . . .
 . . . . . 0 . .
 . . . . . . . 0
 . . 0 . . . . .
 . . . . . . 0 .
 . . . 0 . . . .
 . 0 . . . . . .
 . . . . 0 . . .

 0 . . . . . . .
 . . . . . . 0 .
 . . . 0 . . . .
 . . . . . 0 . .
 . . . . . . . 0
 . 0 . . . . . .
 . . . . 0 . . .
 . . 0 . . . . .

usw.


reftest.spl
-----------
compile: compile reftest
output:
Error: procedure 'p' argument 1 must be a variable in line 11


sierpinski.spl
--------------
compile: compile sierpinski
run:     rungraph sierpinski
input:   -none-
output:
Sierpinski-Kurve


swap.spl
--------
compile: compile swap
run:     run swap
input:   -none-
output:
2 3
3 2


test1.spl
---------
compile: compile test1
run:     run test1
input:   -none-
output:
8


test2.spl
---------
compile: compile test2
run:     run test2
input:   -none-
output:
8


test3.spl
---------
compile: compile test3
run:     run test3
input:   -none-
output:
0
1
2
3
4
5
6
7
8


test4.spl
---------
compile: compile test4
run:     run test4
input:   -none-
output:
3628800
3628800



test5.spl
---------
compile: compile test5
run:     run test5
input:   -none-
output:
30


test6.spl
---------
compile: compile test6
output:
Error: expression too complicated, running out of registers


test7.spl
---------
compile: compile test7
run:     run test7
input:   -none-
output:
ok


test8.spl
---------
compile: compile test8
run:     run test8
input:   -none-
output:
SPL/RTS: index out of bounds


test9.spl
---------
compile: compile test9
run:     run test9
input:   -none-
output:
SPL/RTS: index out of bounds


threedim.spl
------------
compile: compile threedim
run:     run threedim
input:   -none-
output:
10000
00000
00000
00000
00000

00000
01000
00000
00000
00000

00000
00000
00100
00000
00000

00000
00000
00000
00010
00000

00000
00000
00000
00000
00001


time.spl
--------
compile: compile time
run:     run time
input:   -none-
output:
time: 1
time: 2
time: 3
time: 4
time: 5
time: 6
time: 7
time: 8
time: 9
time: 10


twodim.spl
----------
compile: compile twodim
run:     run twodim
input:   -none-
output:
10000
01000
00100
00010
00001
