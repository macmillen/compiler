/*
 * parser.cup -- SPL parser specification
 */


package parse;

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

parser code {:

  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }

:}

/* Terminals (tokens returned by the scanner). */
terminal		ARRAY;

/* Non-terminals */
non terminal		program;

start with program;


program			        ::= typedef | procedure
    ;
typedef                 ::= TYPE IDENT EQ type SEMIC
    ;
type                    ::= IDENT |
                            ARRAY LBRACK INTLIT RBRACK OF type SEMIC
    ;
procedure               ::= PROC IDENT LPAREN params_procedure RPAREN LCURL vardecs statement_sequence RCURL
    ;
procedure_call          ::= IDENT LPAREN params_procedure_call RPAREN SEMIC
    ;
params_procedure        ::= IDENT COLON type params_procedure |
    ;
params_procedure_call   ::= | params_procedure_c1 params_procedure_c2
    ;
params_procedure_c1     ::= refExpression | expression
    ;
params_procedure_c2     ::= COMMA expression params_procedure_call |
    ;

parameter 				::= IDENT COLON type | REF IDENT COLON type
	;
parameterList 			::= | parameter paramListTail
	;
paramListTail 			::= | COMMA parameter | COMMA parameter paramListTail
	;
argument 				::= refExpression | expression
	;
argumentList			::= | parameter paramListTail
	;
argumentListTail 		::= | COMMA parameter | COMMA parameter paramListTail
	;

vardec                  ::= VAR IDENT COLON type SEMIC
    ;
vardecs					::= vardec vardecs |
	;
varassign               ::= refExpression ASGN expression SEMIC
    ;
while_statement         ::= WHILE LPAREN expression RPAREN statement
    ;   
if_statement            ::= IF LPAREN expression RPAREN statement |
                            IF LPAREN expression RPAREN statement ELSE statement
    ;
statement               ::= varassign | procedure_call | if_statement | while_statement | SEMIC | LCURL statements RCURL
    ;
statements				::= statement statements | 
	;

refExpression 			::= IDENT | refExpression LBRACK expression RBRACK
	;
expression              ::= simple_expression EQ simple_expression |
							simple_expression NE simple_expression |
							simple_expression LT simple_expression |
							simple_expression LE simple_expression |
							simple_expression GT simple_expression |
							simple_expression GE simple_expression |
    ; 
simple_expression       ::= term | term PLUS simple_expression | term MINUS simple_expression
    ;
term                    ::= unary | unary STAR term | unary SLASH term
    ;
unary 					::= factor | MINUS factor 
	;
factor                  ::= refExpression | number | LPAREN expression RPAREN
    ;