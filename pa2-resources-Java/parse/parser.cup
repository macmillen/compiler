/*
 * parser.cup -- SPL parser specification
 */


package parse;

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
init with {: scanner.init();              :};
scan with {: return scanner.next_token(); :};

parser code {:

  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }

:}

/* Terminals (tokens returned by the scanner). */
terminal		ARRAY;

/* Non-terminals */
non terminal		program;

start with program;


program			        ::= ARRAY | typedef | procedure
    ;
typedef                 ::= TYPE IDENT EQ type SEMIC
    ;
type                    ::= IDENT |
                            ARRAY LBRACK INTLIT RBRACK OF type SEMIC
    ;
procedure               ::= PROC IDENT LPAREN params_procedure RPAREN LCURL {vardec} statements RCURL
    ;
procedure_call          ::= IDENT LPAREN params_procedure_call RPAREN SEMIC
    ;
params_procedure        ::= IDENT COLON type params_procedure |
    ;
params_procedure_call   ::= | params_procedure_c1 params_procedure_c2
    ;
params_procedure_c1     ::= IDENT | INTLIT
    ;
params_procedure_c2     ::= COMMA expression params_procedure_call |
    ;
vardec                  ::= VAR IDENT COLON type SEMIC
    ;
varassign               ::= IDENT ASGN expression SEMIC
    ;

while_statement         ::= WHILE LPAREN expression RPAREN statements
    ;   
if_statement            ::= IF LPAREN expression RPAREN statements
                            [ELSE statements]
    ;

statement               ::= [ varassign | procedure_call | if_statement | while_statement | SEMIC ]
    ;
statements              ::= statement | LCURL { statement } RCURL
    ;


// FRAGE: [{(EQ | NE | LT | LE | GT | GE) simple_expression}]   
expression              ::= simple_expression [(EQ | NE | LT | LE | GT | GE) simple_expression]
    ;   
simple_expression       ::= [PLUS | MINUS] term {(PLUS | MINUS) term}
    ;
term                    ::= factor {(STAR | SLASH) factor}
    ;
factor                  ::= IDENT | number | LPAREN expression RPAREN
    ;