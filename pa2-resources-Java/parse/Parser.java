
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 17 12:31:48 CEST 2018
//----------------------------------------------------

package parse;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 17 12:31:48 CEST 2018
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\007\000\002\004\003" +
    "\000\002\004\010\000\002\005\013\000\002\006\007\000" +
    "\002\007\005\000\002\007\006\000\002\010\002\000\002" +
    "\010\004\000\002\011\002\000\002\011\005\000\002\012" +
    "\003\000\002\013\002\000\002\013\003\000\002\014\003" +
    "\000\002\014\005\000\002\015\007\000\002\016\004\000" +
    "\002\016\002\000\002\017\006\000\002\020\007\000\002" +
    "\021\007\000\002\021\011\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\005\000\002\023\004\000\002\023\002\000" +
    "\002\024\003\000\002\024\006\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\005\000\002\025" +
    "\005\000\002\025\005\000\002\025\003\000\002\026\003" +
    "\000\002\026\005\000\002\026\005\000\002\027\003\000" +
    "\002\027\005\000\002\027\005\000\002\030\003\000\002" +
    "\030\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\005\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\ufffe\010\006\012\010\001\002\000" +
    "\004\002\171\001\002\000\010\002\ufffe\010\006\012\010" +
    "\001\002\000\004\042\025\001\002\000\010\002\ufffe\010" +
    "\006\012\010\001\002\000\004\042\011\001\002\000\004" +
    "\023\012\001\002\000\006\004\015\042\014\001\002\000" +
    "\004\034\023\001\002\000\010\016\ufffc\033\ufffc\034\ufffc" +
    "\001\002\000\004\017\016\001\002\000\004\041\017\001" +
    "\002\000\004\020\020\001\002\000\004\007\021\001\002" +
    "\000\006\004\015\042\014\001\002\000\010\016\ufffb\033" +
    "\ufffb\034\ufffb\001\002\000\010\002\ufffd\010\ufffd\012\ufffd" +
    "\001\002\000\004\002\uffff\001\002\000\004\015\026\001" +
    "\002\000\010\011\027\016\ufff6\042\031\001\002\000\004" +
    "\042\165\001\002\000\004\016\041\001\002\000\004\032" +
    "\037\001\002\000\006\016\ufff4\033\033\001\002\000\006" +
    "\011\027\042\031\001\002\000\004\016\ufff5\001\002\000" +
    "\006\016\ufff4\033\033\001\002\000\004\016\ufff3\001\002" +
    "\000\006\004\015\042\014\001\002\000\006\016\ufff8\033" +
    "\ufff8\001\002\000\004\021\042\001\002\000\020\006\uffeb" +
    "\013\043\014\uffeb\021\uffeb\022\uffeb\034\uffeb\042\uffeb\001" +
    "\002\000\004\042\161\001\002\000\020\006\uffeb\013\043" +
    "\014\uffeb\021\uffeb\022\uffeb\034\uffeb\042\uffeb\001\002\000" +
    "\016\006\053\014\046\021\052\022\uffdf\034\050\042\047" +
    "\001\002\000\004\015\154\001\002\000\010\015\143\017" +
    "\uffde\031\uffde\001\002\000\020\005\uffe2\006\uffe2\014\uffe2" +
    "\021\uffe2\022\uffe2\034\uffe2\042\uffe2\001\002\000\020\005" +
    "\uffe6\006\uffe6\014\uffe6\021\uffe6\022\uffe6\034\uffe6\042\uffe6" +
    "\001\002\000\016\006\053\014\046\021\052\022\uffdf\034" +
    "\050\042\047\001\002\000\004\015\133\001\002\000\004" +
    "\022\132\001\002\000\006\017\063\031\064\001\002\000" +
    "\016\006\053\014\046\021\052\022\uffdf\034\050\042\047" +
    "\001\002\000\020\005\uffe5\006\uffe5\014\uffe5\021\uffe5\022" +
    "\uffe5\034\uffe5\042\uffe5\001\002\000\020\005\uffe3\006\uffe3" +
    "\014\uffe3\021\uffe3\022\uffe3\034\uffe3\042\uffe3\001\002\000" +
    "\020\005\uffe4\006\uffe4\014\uffe4\021\uffe4\022\uffe4\034\uffe4" +
    "\042\uffe4\001\002\000\004\022\uffe0\001\002\000\012\015" +
    "\077\036\065\041\067\042\066\001\002\000\012\015\077" +
    "\036\065\041\067\042\066\001\002\000\010\015\077\041" +
    "\067\042\066\001\002\000\040\016\uffde\017\uffde\020\uffde" +
    "\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\001\002" +
    "\000\036\016\uffca\020\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\033\uffca\034\uffca\035\uffca\036\uffca" +
    "\037\uffca\040\uffca\001\002\000\032\016\uffd5\020\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\033\uffd5" +
    "\034\uffd5\035\123\036\124\001\002\000\036\016\uffd2\020" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\117\040\120\001" +
    "\002\000\036\016\uffcc\020\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\037\uffcc\040\uffcc\001\002\000\040\016\uffcd\017\063" +
    "\020\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd" +
    "\001\002\000\004\034\116\001\002\000\026\016\uffd6\020" +
    "\uffd6\023\103\024\107\025\102\026\105\027\104\030\106" +
    "\033\uffd6\034\uffd6\001\002\000\036\016\uffcf\020\uffcf\023" +
    "\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\001\002\000" +
    "\012\015\077\036\065\041\067\042\066\001\002\000\004" +
    "\016\101\001\002\000\036\016\uffcb\020\uffcb\023\uffcb\024" +
    "\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\033\uffcb\034\uffcb" +
    "\035\uffcb\036\uffcb\037\uffcb\040\uffcb\001\002\000\012\015" +
    "\077\036\065\041\067\042\066\001\002\000\012\015\077" +
    "\036\065\041\067\042\066\001\002\000\012\015\077\036" +
    "\065\041\067\042\066\001\002\000\012\015\077\036\065" +
    "\041\067\042\066\001\002\000\012\015\077\036\065\041" +
    "\067\042\066\001\002\000\012\015\077\036\065\041\067" +
    "\042\066\001\002\000\012\016\uffdb\020\uffdb\033\uffdb\034" +
    "\uffdb\001\002\000\012\016\uffd7\020\uffd7\033\uffd7\034\uffd7" +
    "\001\002\000\012\016\uffd9\020\uffd9\033\uffd9\034\uffd9\001" +
    "\002\000\012\016\uffd8\020\uffd8\033\uffd8\034\uffd8\001\002" +
    "\000\012\016\uffdc\020\uffdc\033\uffdc\034\uffdc\001\002\000" +
    "\012\016\uffda\020\uffda\033\uffda\034\uffda\001\002\000\020" +
    "\005\uffea\006\uffea\014\uffea\021\uffea\022\uffea\034\uffea\042" +
    "\uffea\001\002\000\012\015\077\036\065\041\067\042\066" +
    "\001\002\000\012\015\077\036\065\041\067\042\066\001" +
    "\002\000\032\016\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\026\uffd0\027\uffd0\030\uffd0\033\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\001\002\000\032\016\uffd1\020\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\030\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\001\002\000\012\015\077\036\065\041\067" +
    "\042\066\001\002\000\012\015\077\036\065\041\067\042" +
    "\066\001\002\000\026\016\uffd3\020\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\033\uffd3\034\uffd3\001" +
    "\002\000\026\016\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\033\uffd4\034\uffd4\001\002\000" +
    "\036\016\uffce\020\uffce\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037" +
    "\uffce\040\uffce\001\002\000\004\020\131\001\002\000\042" +
    "\016\uffdd\017\uffdd\020\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd" +
    "\036\uffdd\037\uffdd\040\uffdd\001\002\000\010\002\ufffa\010" +
    "\ufffa\012\ufffa\001\002\000\012\015\077\036\065\041\067" +
    "\042\066\001\002\000\004\016\135\001\002\000\014\006" +
    "\053\014\046\021\052\034\050\042\047\001\002\000\020" +
    "\005\137\006\uffe8\014\uffe8\021\uffe8\022\uffe8\034\uffe8\042" +
    "\uffe8\001\002\000\014\006\053\014\046\021\052\034\050" +
    "\042\047\001\002\000\020\005\uffe7\006\uffe7\014\uffe7\021" +
    "\uffe7\022\uffe7\034\uffe7\042\uffe7\001\002\000\004\022\142" +
    "\001\002\000\020\005\uffe1\006\uffe1\014\uffe1\021\uffe1\022" +
    "\uffe1\034\uffe1\042\uffe1\001\002\000\014\015\077\016\ufff1" +
    "\036\065\041\067\042\066\001\002\000\006\016\uffef\033" +
    "\152\001\002\000\004\016\ufff0\001\002\000\006\016\ufff2" +
    "\033\ufff2\001\002\000\004\016\150\001\002\000\004\034" +
    "\151\001\002\000\020\005\ufff9\006\ufff9\014\ufff9\021\ufff9" +
    "\022\ufff9\034\ufff9\042\ufff9\001\002\000\012\015\077\036" +
    "\065\041\067\042\066\001\002\000\004\016\uffee\001\002" +
    "\000\012\015\077\036\065\041\067\042\066\001\002\000" +
    "\004\016\156\001\002\000\014\006\053\014\046\021\052" +
    "\034\050\042\047\001\002\000\020\005\uffe9\006\uffe9\014" +
    "\uffe9\021\uffe9\022\uffe9\034\uffe9\042\uffe9\001\002\000\016" +
    "\006\uffec\014\uffec\021\uffec\022\uffec\034\uffec\042\uffec\001" +
    "\002\000\004\032\162\001\002\000\006\004\015\042\014" +
    "\001\002\000\004\034\164\001\002\000\020\006\uffed\013" +
    "\uffed\014\uffed\021\uffed\022\uffed\034\uffed\042\uffed\001\002" +
    "\000\004\032\166\001\002\000\006\004\015\042\014\001" +
    "\002\000\006\016\ufff7\033\ufff7\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\010\002\003\003\004\005\006\001\001\000" +
    "\002\001\001\000\010\002\167\003\004\005\006\001\001" +
    "\000\002\001\001\000\010\002\023\003\004\005\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\031" +
    "\010\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\033\001\001\000\004\007\034" +
    "\001\001\000\002\001\001\000\004\011\035\001\001\000" +
    "\002\001\001\000\004\004\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\043\016\044\001\001\000" +
    "\002\001\001\000\006\015\043\016\157\001\001\000\020" +
    "\006\056\017\050\020\057\021\060\022\055\023\053\024" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\006\056\017\050\020" +
    "\057\021\060\022\055\023\140\024\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\006" +
    "\056\017\050\020\057\021\060\022\055\023\061\024\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\024\072\025\127\026\074" +
    "\027\067\030\070\031\075\032\071\001\001\000\020\024" +
    "\072\025\073\026\074\027\067\030\070\031\075\032\071" +
    "\001\001\000\010\024\072\031\126\032\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\024\072" +
    "\025\077\026\074\027\067\030\070\031\075\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\024\072" +
    "\026\114\027\067\030\070\031\075\032\071\001\001\000" +
    "\016\024\072\026\113\027\067\030\070\031\075\032\071" +
    "\001\001\000\016\024\072\026\112\027\067\030\070\031" +
    "\075\032\071\001\001\000\016\024\072\026\111\027\067" +
    "\030\070\031\075\032\071\001\001\000\016\024\072\026" +
    "\110\027\067\030\070\031\075\032\071\001\001\000\016" +
    "\024\072\026\107\027\067\030\070\031\075\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\024\072\027\121\030\070\031\075" +
    "\032\071\001\001\000\014\024\072\027\120\030\070\031" +
    "\075\032\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\024\072\026\125\027\067\030\070\031\075\032" +
    "\071\001\001\000\016\024\072\026\124\027\067\030\070" +
    "\031\075\032\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\024\072\025\133\026\074\027" +
    "\067\030\070\031\075\032\071\001\001\000\002\001\001" +
    "\000\016\006\056\017\050\020\057\021\060\022\135\024" +
    "\054\001\001\000\002\001\001\000\016\006\056\017\050" +
    "\020\057\021\060\022\137\024\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\012\143" +
    "\013\146\014\144\024\072\025\145\026\074\027\067\030" +
    "\070\031\075\032\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\012\143\014\152\024\072" +
    "\025\145\026\074\027\067\030\070\031\075\032\071\001" +
    "\001\000\002\001\001\000\020\024\072\025\154\026\074" +
    "\027\067\030\070\031\075\032\071\001\001\000\002\001" +
    "\001\000\016\006\056\017\050\020\057\021\060\022\156" +
    "\024\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  public void syntax_error(Symbol currToken) {
    System.out.println(
      "**** Error: syntax error" +
      " in line " + currToken.left +
      ", column " + currToken.right
    );
    System.exit(0);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // number ::= INTLIT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // factor ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // factor ::= number 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= refExpression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // unary ::= MINUS factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // unary ::= factor 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unary",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= unary SLASH term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= unary STAR term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= unary 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("term",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // simple_expression ::= term MINUS simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // simple_expression ::= term PLUS simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // simple_expression ::= term 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_expression",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= simple_expression GE simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= simple_expression GT simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= simple_expression LE simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= simple_expression LT simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= simple_expression NE simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= simple_expression EQ simple_expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // refExpression ::= refExpression LBRACK expression RBRACK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // refExpression ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("refExpression",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statements ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= LCURL statements RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= SEMIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= while_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= if_statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= procedure_call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= varassign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_statement ::= IF LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_statement",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // while_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_statement",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varassign ::= refExpression ASGN expression SEMIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varassign",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vardecs ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vardecs ::= vardec vardecs 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardecs",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vardec ::= VAR IDENT COLON type SEMIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vardec",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // argumentListTail ::= argument COMMA argumentListTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentListTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // argumentListTail ::= argument 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentListTail",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argumentList ::= argumentListTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argumentList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentList",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argument ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramListTail ::= COMMA parameter paramListTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramListTail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramListTail ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramListTail",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // parameterList ::= parameter paramListTail 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // parameterList ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameterList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // parameter ::= REF IDENT COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // parameter ::= IDENT COLON type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // procedure_call ::= IDENT LPAREN argumentList RPAREN SEMIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_call",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // procedure ::= PROC IDENT LPAREN parameterList RPAREN LCURL vardecs statements RCURL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= ARRAY LBRACK INTLIT RBRACK OF type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type ::= IDENT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // typedef ::= TYPE IDENT EQ type SEMIC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typedef",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= procedure program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= typedef program 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

